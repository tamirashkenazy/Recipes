{"version":3,"sources":["components/navbar/navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","fontFamily","MenuAppBar","classes","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","className","AppBar","color","position","Toolbar","IconButton","edge","aria-label","Typography","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8UAWMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,EACVK,WAAY,kBAKLC,EAAa,WACxB,IAAMC,EAAUZ,IAChB,EAAgCa,IAAMC,SAA6B,MAAnE,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAOC,QAAQH,GAMfI,EAAc,WAClBH,EAAY,OAGd,OACE,qBAAKI,UAAWR,EAAQR,KAAxB,SACE,cAACiB,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAAjC,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLN,UAAWR,EAAQN,WACnBgB,MAAM,UACNK,aAAW,OAJb,SAME,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWR,EAAQH,MAA5C,4BAGA,gCACE,cAACgB,EAAA,EAAD,CACEE,aAAW,0BACXG,gBAAc,cACdC,gBAAc,OACdC,QA5BO,SAACC,GAClBjB,EAAYiB,EAAMC,gBA4BRZ,MAAM,UALR,SAOE,cAAC,IAAD,MAEF,eAAC,IAAD,CACEa,GAAG,cACHpB,SAAUA,EACVqB,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,SAEdrB,KAAMA,EACNwB,QAAStB,EAbX,UAeE,cAACuB,EAAA,EAAD,CAAUV,QAASb,EAAnB,qBACA,cAACuB,EAAA,EAAD,CAAUV,QAASb,EAAnB,sCCnECwB,MATf,WACE,OACE,eAAC,IAAMC,SAAP,WACE,cAAC,EAAD,IACA,+CCMSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c184e8c1.chunk.js","sourcesContent":["import React from 'react'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Menu from '@material-ui/core/Menu'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1,\n      fontFamily: 'Courgette'\n    }\n  })\n)\n\nexport const MenuAppBar = () => {\n  const classes = useStyles()\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\n  const open = Boolean(anchorEl)\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar color='default' position='static'>\n        <Toolbar>\n          <IconButton\n            edge='start'\n            className={classes.menuButton}\n            color='inherit'\n            aria-label='menu'\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant='h6' className={classes.title}>\n            Cookie Monster\n          </Typography>\n          <div>\n            <IconButton\n              aria-label='account of current user'\n              aria-controls='menu-appbar'\n              aria-haspopup='true'\n              onClick={handleMenu}\n              color='inherit'\n            >\n              <AccountCircle />\n            </IconButton>\n            <Menu\n              id='menu-appbar'\n              anchorEl={anchorEl}\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right'\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right'\n              }}\n              open={open}\n              onClose={handleClose}\n            >\n              <MenuItem onClick={handleClose}>Profile</MenuItem>\n              <MenuItem onClick={handleClose}>My account</MenuItem>\n            </Menu>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport { MenuAppBar } from './components/navbar/navbar'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <MenuAppBar />\n      <h1>Blah Blah</h1>\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}